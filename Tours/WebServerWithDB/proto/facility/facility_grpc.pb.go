// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0--rc2
// source: facility/facility.proto

package facility

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FacilityServiceClient is the client API for FacilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FacilityServiceClient interface {
	Create(ctx context.Context, in *FacilityCreateDto, opts ...grpc.CallOption) (*FacilityResponseDto, error)
	GetByAuthorId(ctx context.Context, in *GetParams, opts ...grpc.CallOption) (*FacilityListResponse, error)
}

type facilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFacilityServiceClient(cc grpc.ClientConnInterface) FacilityServiceClient {
	return &facilityServiceClient{cc}
}

func (c *facilityServiceClient) Create(ctx context.Context, in *FacilityCreateDto, opts ...grpc.CallOption) (*FacilityResponseDto, error) {
	out := new(FacilityResponseDto)
	err := c.cc.Invoke(ctx, "/FacilityService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilityServiceClient) GetByAuthorId(ctx context.Context, in *GetParams, opts ...grpc.CallOption) (*FacilityListResponse, error) {
	out := new(FacilityListResponse)
	err := c.cc.Invoke(ctx, "/FacilityService/GetByAuthorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacilityServiceServer is the server API for FacilityService service.
// All implementations must embed UnimplementedFacilityServiceServer
// for forward compatibility
type FacilityServiceServer interface {
	Create(context.Context, *FacilityCreateDto) (*FacilityResponseDto, error)
	GetByAuthorId(context.Context, *GetParams) (*FacilityListResponse, error)
	mustEmbedUnimplementedFacilityServiceServer()
}

// UnimplementedFacilityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFacilityServiceServer struct {
}

func (UnimplementedFacilityServiceServer) Create(context.Context, *FacilityCreateDto) (*FacilityResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFacilityServiceServer) GetByAuthorId(context.Context, *GetParams) (*FacilityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAuthorId not implemented")
}
func (UnimplementedFacilityServiceServer) mustEmbedUnimplementedFacilityServiceServer() {}

// UnsafeFacilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FacilityServiceServer will
// result in compilation errors.
type UnsafeFacilityServiceServer interface {
	mustEmbedUnimplementedFacilityServiceServer()
}

func RegisterFacilityServiceServer(s grpc.ServiceRegistrar, srv FacilityServiceServer) {
	s.RegisterService(&FacilityService_ServiceDesc, srv)
}

func _FacilityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacilityCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FacilityService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilityServiceServer).Create(ctx, req.(*FacilityCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilityService_GetByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilityServiceServer).GetByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FacilityService/GetByAuthorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilityServiceServer).GetByAuthorId(ctx, req.(*GetParams))
	}
	return interceptor(ctx, in, info, handler)
}

// FacilityService_ServiceDesc is the grpc.ServiceDesc for FacilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FacilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FacilityService",
	HandlerType: (*FacilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FacilityService_Create_Handler,
		},
		{
			MethodName: "GetByAuthorId",
			Handler:    _FacilityService_GetByAuthorId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "facility/facility.proto",
}
